hellooktabff:
  allowedOrigins: ${allowed_origins}
  security-mapping:
    ALLOWED_USERS:
      - HelloOkta_StandardUser
  filterOrderMapping:
    COMMONS_REQUEST_LOGGING: -10
    USER_LOGGING: 10

spring:
  main.allow-bean-definition-overriding: true
  application:
    name: hello-okta-bff
  security:
    oauth2:
      client:
        provider:
          okta:
            issuer-uri: ${issuer}
            authorization-uri: ${issuer}/v1/authorize
            token-uri: ${issuer}/v1/token
            user-info-uri: ${issuer}/v1/userinfo
            jwk-set-uri: ${issuer}/v1/keys
            user-name-attribute: email
      resourceserver:
        jwt:
          issuer-uri: ${issuer}
          jwk-set-uri: ${issuer}/v1/keys

hellooktaapiclient:
  baseUrl: ${hellooktaapiclient_baseUrl}
  runAsDetails:
      grantType: client_credentials
      clientId: ${hellooktaclient_id}
      clientSecret: ${hellooktaclient_secret}
      accessTokenUri: ${issuer}/v1/token
      scope: message.read

logging:
  level:
    org.springframework.security.oauth2.client.OAuth2RestTemplate: ${rest_template_log_level:INFO}
    org.springframework.web.client.RestTemplate: ${rest_template_log_level:INFO}
    lv.gennadyyonov.hellookta.bff.connectors.hellooktaapi.HelloOktaApiConnector: ${hello_okta_api_log_level:INFO}
    lv.gennadyyonov.hellookta.bff.connectors.okta.TokenConnector: ${okta_token_log_level:INFO}
    lv.gennadyyonov.hellookta.connectors.UserInfoConnector: ${okta_user_log_level:INFO}
    org.springframework.web.filter.CommonsRequestLoggingFilter: ${http_log_level:INFO}

graphql:
  servlet:
    corsEnabled: false
    websocket:
      enabled: false
  task:
    execution:
      thread-name-prefix: GraphqlAsync-
      pool:
        core-size: ${graphql_task_execution_pool_core_size:150}
        max-size: ${graphql_task_execution_pool_max_size:550}
        keep-alive-seconds: ${graphql_task_execution_pool_keep_alive_seconds:30}

schedule:
  jwk-set-cache-refresh-time: ${jwk_set_cache_refresh_time:300000} # 5 minutes