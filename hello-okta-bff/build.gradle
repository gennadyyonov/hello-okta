plugins {
    id 'checkstyle'
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
    id 'org.springframework.boot' version "$springBootVersion"
}

bootRun {
    def localPropertiesFile = 'env/.env.localhost';
    file(localPropertiesFile).readLines().each() {
        if (!it.isEmpty() && !it.startsWith('#')) {
            def (key, value) = it.tokenize('=')
            if (System.getenv(key) == null) {
                environment key, value
            }
        }
    }
    systemProperties System.properties
}

ext {
    set('graphqlJavaSpringBootVersion', '8.0.0')
    set('wirmockVersion', '2.27.2')
    set('jsonwebtokenVersion', '0.11.2')
}

dependencies {
    // Import BOM-s
    implementation enforcedPlatform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation project(':hello-okta-api-dto')
    implementation project(':hello-okta-logging-api')
    implementation project(':hello-okta-logging-impl')
    implementation project(':hello-okta-services')
    implementation project(':hello-okta-actuator')

    // GraphQL
    implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:$graphqlJavaSpringBootVersion"
    implementation "com.graphql-java-kickstart:graphiql-spring-boot-starter:$graphqlJavaSpringBootVersion"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

    implementation 'io.github.openfeign:feign-core'
    implementation 'io.github.openfeign:feign-slf4j'
    implementation 'io.github.openfeign:feign-jackson'
    implementation 'io.github.openfeign:feign-httpclient'
    implementation 'io.github.openfeign.form:feign-form-spring'
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "org.apache.httpcomponents:httpclient:$apacheHttpClientVersion"
    implementation "commons-codec:commons-codec:$commonsCodecVersion"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.jsonwebtoken:jjwt:0.9.1'
    testImplementation "com.graphql-java-kickstart:graphql-spring-boot-starter-test:$graphqlJavaSpringBootVersion"
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wirmockVersion"
    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"
    testImplementation "io.jsonwebtoken:jjwt-api:$jsonwebtokenVersion"
    testImplementation "io.jsonwebtoken:jjwt-impl:$jsonwebtokenVersion"
}

checkstyle {
    toolVersion = '8.37'
    configProperties.configDir = "${parent.projectDir}/config/checkstyle"
    sourceSets = []
}

build.dependsOn.add(checkstyleMain)

test {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = "app.${archiveExtension.get()}"
}