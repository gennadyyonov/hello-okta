plugins {
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
    id 'org.springframework.boot' version "$springBootVersion"
}

dependencies {
    // Import BOM-s
    implementation enforcedPlatform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    implementation enforcedPlatform("io.micrometer:micrometer-tracing-bom:$micrometerTracingVersion")

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation project(':hello-okta-api-dto')
    implementation project(':hello-okta-logging-api')
    implementation project(':hello-okta-logging-impl')
    implementation project(':hello-okta-services')
    implementation project(':hello-okta-actuator')

    // GraphQL
    implementation 'org.springframework.boot:spring-boot-starter-graphql'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation "com.nimbusds:nimbus-jose-jwt:$nimbusdsVersion"

    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'io.github.openfeign:feign-jackson'
    implementation 'io.github.openfeign:feign-httpclient'
    implementation 'io.github.openfeign:feign-form-spring'
    implementation "org.apache.httpcomponents:httpclient:$apacheHttpClientVersion"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'commons-codec:commons-codec'

    implementation ('org.apache.commons:commons-compress') {
        because 'CVE-2024-25710, CVE-2024-26308 fix'
        version {
            strictly commonsCompressVersion
        }
    }

    implementation('commons-io:commons-io') {
        because 'CVE-2024-47554 fix'
        version {
            strictly commonsIoVersion
        }
    }

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$openApiVersion"

    testImplementation project(':hello-okta-testing')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation "org.wiremock:wiremock-standalone:$wirmockVersion"
    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"
    testImplementation "io.jsonwebtoken:jjwt-api:$jsonwebtokenVersion"
    testImplementation "io.jsonwebtoken:jjwt-gson:$jsonwebtokenVersion"
    testImplementation "io.jsonwebtoken:jjwt-impl:$jsonwebtokenVersion"
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = "app.${archiveExtension.get()}"
}

project.ext.overrideJacocoCoverageVerification = true

tasks.named('jacocoTestCoverageVerification') {
    violationRules {
        rule {
            limit {
                minimum = 0.85
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.84
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
        rule {
            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
        }
    }
}
