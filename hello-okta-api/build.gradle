plugins {
    id 'checkstyle'
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
}

dependencies {
    // Import BOM-s
    implementation enforcedPlatform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation project(':hello-okta-api-dto')
    implementation project(':hello-okta-logging-api')
    implementation project(':hello-okta-logging-impl')
    implementation project(':hello-okta-services')
    implementation project(':hello-okta-actuator')

    implementation "org.springdoc:springdoc-openapi-ui:${openApiVersion}"
    implementation "org.springdoc:springdoc-openapi-security:${openApiVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'io.github.openfeign:feign-jackson'
    implementation 'io.github.openfeign:feign-httpclient'
    implementation 'io.github.openfeign.form:feign-form-spring'
    implementation "org.apache.httpcomponents:httpclient:${apacheHttpClientVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation('net.minidev:json-smart') {
        because 'Critical CVE-2021-27568 fix'
        version {
            strictly jsonSmartVersion
        }
    }

    implementation('commons-io:commons-io') {
        because 'Medium CVE-20, CVE-2021-29425 fix'
        version {
            strictly commonsIoVersion
        }
    }

    implementation('commons-codec:commons-codec') {
        because 'Medium CVE-200 fix'
        version {
            strictly commonsCodecVersion
        }
    }

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "com.github.tomakehurst:wiremock-jre8:$wirmockVersion"
    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"
    testImplementation "io.jsonwebtoken:jjwt-api:$jsonwebtokenVersion"
    testImplementation "io.jsonwebtoken:jjwt-gson:$jsonwebtokenVersion"
    testImplementation "io.jsonwebtoken:jjwt-impl:$jsonwebtokenVersion"
}

checkstyle {
    toolVersion = '8.42'
    configProperties.configDir = parent.file("config/checkstyle")
}

checkstyleTest {
    enabled = false
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = "app.${archiveExtension.get()}"
}